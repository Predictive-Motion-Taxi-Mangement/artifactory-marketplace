
import React from "react";
import { Link } from "react-router-dom";
import { cn } from "@/lib/utils";

const categories = [
  {
    id: "abstract",
    name: "Abstract",
    description: "Non-representational forms and patterns generated by AI.",
    image: "https://images.unsplash.com/photo-1603248322882-f3981919aae3?auto=format&fit=crop&w=800&q=80",
  },
  {
    id: "landscape",
    name: "Landscape",
    description: "AI-imagined scenes of natural and urban environments.",
    image: "https://images.unsplash.com/photo-1619120238346-978e07731e77?auto=format&fit=crop&w=800&q=80",
  },
  {
    id: "portrait",
    name: "Portrait",
    description: "AI-generated interpretations of human and character forms.",
    image: "https://images.unsplash.com/photo-1633752279531-fd66495c52a6?auto=format&fit=crop&w=800&q=80",
  },
];

const CategorySection: React.FC = () => {
  return (
    <section className="py-20 px-6 md:px-10 bg-secondary/30">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-medium mb-4">Browse by Category</h2>
          <p className="text-muted-foreground max-w-xl mx-auto">
            Explore our diverse collection of AI-generated art across various styles and themes.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {categories.map((category) => (
            <CategoryCard key={category.id} category={category} />
          ))}
        </div>
      </div>
    </section>
  );
};

interface CategoryCardProps {
  category: {
    id: string;
    name: string;
    description: string;
    image: string;
  };
}

const CategoryCard: React.FC<CategoryCardProps> = ({ category }) => {
  const [isLoaded, setIsLoaded] = React.useState(false);
  const [isHovered, setIsHovered] = React.useState(false);

  return (
    <Link 
      to={`/category/${category.id}`}
      className={cn(
        "block rounded-2xl overflow-hidden h-[350px] relative group transition-transform duration-500 ease-apple-ease",
        isHovered ? "scale-[1.02]" : "scale-100"
      )}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {/* Background Image */}
      <div className={cn("absolute inset-0", !isLoaded && "image-loading")}>
        <div className="absolute inset-0 bg-black/40 transition-opacity duration-500 ease-apple-ease group-hover:bg-black/30 z-10" />
        <img
          src={category.image}
          alt={category.name}
          className={cn(
            "w-full h-full object-cover transition-transform duration-500 ease-apple-ease",
            isLoaded ? "opacity-100" : "opacity-0",
            isHovered ? "scale-110" : "scale-100"
          )}
          onLoad={() => setIsLoaded(true)}
        />
      </div>
      
      {/* Content */}
      <div className="absolute inset-0 z-20 flex flex-col justify-end p-6 text-white">
        <div className="transform transition-transform duration-500 ease-apple-ease group-hover:translate-y-[-8px]">
          <h3 className="text-2xl font-medium mb-2">{category.name}</h3>
          <p className="text-sm text-white/80 mb-6 max-w-xs">{category.description}</p>
          <span className="inline-block py-2 px-4 bg-white/20 backdrop-blur rounded-full text-sm transition-all duration-500 ease-apple-ease group-hover:bg-white/30">
            Explore {category.name}
          </span>
        </div>
      </div>
    </Link>
  );
};

export default CategorySection;
